#!/usr/bin/env node
'use strict';
var fs = require('fs');
var path = require('path');
var pinecone = require('../');
var argv = require('minimist')(process.argv.slice(2), {
  string: ['o', 'output'],
  boolean: ['ast']
});

var nomnom = require('nomnom')
   .script('pinecone')
   .option('ast', {
      flag: true,
      help: 'Input is SpiderMonkey AST and not raw JavaScript.'
   })
   .option('output', {
    abbr: 'o',
    type: 'string',
    help: 'Output file, otherwise outputs to stdout'
   })
   .option('version', {
      abbr: 'v',
      flag: true,
      help: 'print version and exit',
      callback: function() {
         return 'pinecone version '+require('../package.json').version;
      }
   })
   .option('file', {
    position: 0,
    help: 'Input filename. Currently only supports one file.',
    required: true
   })
   .nocolors();
var opts = nomnom.parse();

if (opts._.length === 0) {
  console.log(nomnom.getUsage());
  process.exit(0);
}

var file = path.join(process.cwd(), argv._[0]);
fs.readFile(file, { encoding: 'utf8' }, function(err, data) {
  if (err) throw err;
  var output;
  console.log(data);
  if (argv.ast) {
    output = pinecone.convertFromAST(JSON.parse(data));
  } else {
    output = pinecone.convert(data);
  }
  if (argv.o || argv.output) {
    var outfile = path.join(process.cwd(), argv.output || argv.o);
    fs.writeFile(outfile, output, function(err) {
      if (err) throw err;
      else console.log('Saved to ' + outfile);
    });
  } else {
    console.log(output);
  }
});